esphome:
  name: esp32-matrix
  friendly_name: esp32-matrix

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "kiCsPt6+xf9IjJzUEjBgtyWIH/1s58kdb6ifh3YnqGM="

ota:
  - platform: esphome
    password: "470b0bfdaab31060855611d5e3371857"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Esp32-Matrix Fallback Hotspot"
    password: "vHM0Urp4f7LZ"

#captive_portal:

text_sensor:
  - platform: homeassistant
    name: "hatext"
    entity_id: input_text.esp32_matrix
    id: hatext
 
binary_sensor:
  - platform: homeassistant
    id: kontormodus
    entity_id: input_boolean.kontormodus
    name: "Office mode"
 
light:
  - platform: neopixelbus
    # type: GRB
    type: RGB
    variant: WS2811
    pin: GPIO14
    num_leds: 64
    name: "NeoPixel Light"
    id: ehmtx_light
    color_correct: [20%, 20%, 20%]
    internal: True
 
number:
  - platform: template
    name: "Blink counter"
    internal: True
    optimistic: True
    id: blink_counter
    initial_value: 0
    restore_value: False
    min_value: 0
    max_value: 1
    step: 1
 
display:
  - platform: addressable_light
    id: ehmtx_display
    addressable_light_id: ehmtx_light
    width: 8
    height: 8
    rotation: 180Â° # USB socket up
    update_interval: 500ms
    # auto_clear_enabled: true
    lambda: |-
      auto counter = id(blink_counter).make_call();
      if (id(kontormodus).state == true) {
        ESP_LOGD("lambda: ", "Office mode on");
        auto black = Color(0, 0, 0);
        auto red = Color(255, 0, 0);
        auto green = Color(0, 255, 0);
        auto blue = Color(0, 0, 255);
        auto white = Color(192,192,192);
        auto orange = Color(255, 95, 31);
        auto yellow = Color(255,255,0);
 
        std::string myhatext = id(hatext).state;
        ESP_LOGD("lambda: ", "hatext %s", myhatext);
        std::vector<std::string> v;
        char * token;
        char seps[] = ";";
        token = strtok (&myhatext[0],seps);
        while (token != NULL)
        {
          v.push_back(token);
          token = strtok (NULL, seps);
        }
        for ( std::string s : v ) {
          ESP_LOGD("test: ", "String to Vector: %s", s.c_str());
          std::string input = s.c_str();
          std::string delimiter = ":";
          std::string coordinates = s.substr(0, s.find(delimiter));
          std::string colour = s.substr(s.find(delimiter)+1);
          // ESP_LOGD("test: ", "Coordinates: %s", coordinates.c_str());
          // ESP_LOGD("test: ", "Colour: %s", colour.c_str());
          std::string delim2 = ",";
          int plotx = std::stoi(s.substr(0, coordinates.find(delim2)));
          int ploty = std::stoi(s.substr(coordinates.find(delim2)+1));
          // ESP_LOGD("test: ", "X: %d", plotx);
          // ESP_LOGD("test: ", "Y: %d", ploty);
          int i = id(blink_counter).state;
 
          if (colour == "green") {
            it.draw_pixel_at(plotx, ploty, green);
          }
          if (colour == "yellow") {
            if (i == 1) {
              it.draw_pixel_at(plotx, ploty, yellow);
            } else {
              it.draw_pixel_at(plotx, ploty, COLOR_OFF);
            }
          }
          if (colour == "white") {
            // warning
            if (i == 1) {
              it.draw_pixel_at(plotx, ploty, white);
            } else {
              it.draw_pixel_at(plotx, ploty, COLOR_OFF);
            }
          }
          if (colour == "red") {
            // failed
            if (i == 1) {
              it.draw_pixel_at(plotx, ploty, red);
            } else {
              it.draw_pixel_at(plotx, ploty, COLOR_OFF);
            }
          }
          if (colour == "orange") {
            // failed
            if (i == 1) {
              it.draw_pixel_at(plotx, ploty, orange);
            } else {
              it.draw_pixel_at(plotx, ploty, COLOR_OFF);
            }
          }
          if (colour == "blue") {
            // running
            if (i == 1) {
              it.draw_pixel_at(plotx, ploty, blue);
            } else {
              it.draw_pixel_at(plotx, ploty, COLOR_OFF);
            }
          }
        }
        counter.number_increment(true);
        counter.perform();
      } else {
        // ESP_LOGD("lambda: ", "Office mode off");
        it.fill(COLOR_OFF);
      }